//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dal {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource_Projects {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource_Projects() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("dal.Resource.Projects", typeof(Resource_Projects).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h4 class=&quot;title grey&quot;&gt;baio-mongo (npm package)&lt;/h4&gt;
        ///&lt;p&gt;
        ///    Little helper library for native nodejs mongodb driver.
        ///&lt;/p&gt;
        ///&lt;p&gt;
        ///    Features:
        ///&lt;/p&gt;
        ///&lt;ul&gt;
        ///    &lt;li&gt;Open connection with connection string&lt;/li&gt;
        ///    &lt;li&gt;Read / Write data in a single line of code&lt;/li&gt;
        ///&lt;/ul&gt;
        ///&lt;div&gt;&lt;a href=&quot;https://github.com/baio/baio-mongo&quot;&gt;source&lt;/a&gt;&lt;/div&gt;
        ///&lt;div&gt;&lt;a href=&quot;https://npmjs.org/package/baio-mongo&quot;&gt;npm&lt;/a&gt;&lt;/div&gt;
        ///&lt;h4 class=&quot;title grey&quot;&gt;Open-MVC (nuget package)&lt;/h4&gt;
        ///&lt;p&gt;
        ///    Allow users login to your site with bun [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string More {
            get {
                return ResourceManager.GetString("More", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h4 class=&quot;title grey&quot;&gt;Implementation &amp;amp; Tecnologies&lt;/h4&gt;
        ///&lt;p&gt;
        ///    &lt;span class=&quot;bold&quot;&gt;Crawling:&lt;/span&gt;
        ///    Data was extarcted from the web by means of crawler written in &lt;a href=&quot;#&quot;&gt;nodejs&lt;/a&gt;.
        ///    Data was read in raw html format, then parsed with nodejs jquery module, after which &lt;a href=&quot;#&quot;&gt;yandex geocode api&lt;/a&gt; was used to link
        ///    addressed with their geo coordnates.
        ///&lt;/p&gt;
        ///&lt;p&gt;
        ///    &lt;span class=&quot;bold&quot;&gt;Single page application:&lt;/span&gt;
        ///    Client apllication build upon &lt;a href=&quot;#&quot;&gt;knockoutjs&lt;/a&gt;  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Prezek {
            get {
                return ResourceManager.GetString("Prezek", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h4 class=\&quot;title grey\&quot;&gt;Implementation &amp; Technologies&lt;/h4&gt;
        ///&lt;p&gt;
        ///    &lt;span class=&quot;bold&quot;&gt;Single page application:&lt;/span&gt;
        ///    The html is loaded on the client side (web browser) only once when application initialized, after that all user interfaces
        ///    are generated by the client itself. Client application build upon &lt;a href=&quot;#&quot;&gt;Ural SPA Framework&lt;/a&gt; on &lt;a href=&quot;#&quot;&gt;coffee-script&lt;/a&gt;.
        ///&lt;/p&gt;
        ///&lt;p&gt;
        ///    &lt;span class=&quot;bold&quot;&gt;Pros:&lt;/span&gt;
        ///    Agile user interface, no page reloading needed. Reduction in size of t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TwiTur {
            get {
                return ResourceManager.GetString("TwiTur", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h4 class=\&quot;title grey\&quot;&gt;Implementation &amp; Technologies&lt;/h4&gt;
        ///&lt;p&gt;
        ///    &lt;span class=&quot;bold&quot;&gt;Single page application:&lt;/span&gt;
        ///    The html is loaded on the client side (web browser) only once when application initialized, after that all user interfaces
        ///    are generated by the client itself. Client application build upon &lt;a href=&quot;#&quot;&gt;Ural SPA Framework&lt;/a&gt; on &lt;a href=&quot;#&quot;&gt;coffee-script&lt;/a&gt;.
        ///&lt;/p&gt;
        ///&lt;p&gt;
        ///    &lt;span class=&quot;bold&quot;&gt;Pros:&lt;/span&gt;
        ///    Agile user interface, no page reloading needed. Reduction in size of t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TwiTur1 {
            get {
                return ResourceManager.GetString("TwiTur1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h4 class=&quot;title grey&quot;&gt;Summary &amp;amp; Objectives&lt;/h4&gt;
        ///&lt;p&gt;
        ///    Ural is a MV* framework for single web page applications written with coffeescript.
        ///                            Although there is a lot similar frameworks such as backbone, javascriptmvc, durandaljs and more, no one of them is prominent or near to become de facto standard for the developers
        ///                             community. Since that the conventional wisdom here is - “It is easier to write your own web client MVC framework than to explo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Ural {
            get {
                return ResourceManager.GetString("Ural", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h4 class=&quot;title grey&quot;&gt;Summary &amp;amp; Objectives&lt;/h4&gt;
        ///&lt;p&gt;
        ///    Data-Avail WinForms is a MV* framework on the base of NET. Windows Forms libraries.
        ///Default NET. Windows Forms application provides for developer event driven code paradigm with design time utilities and code behind model, Data-Avail WinForms framework shift this paradigm to MV* code implementation.
        ///&lt;/p&gt;
        ///&lt;p&gt;
        ///    The framework also makes it possible to implement whole application using only XML templates which describes data layer, user inter [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WinForms {
            get {
                return ResourceManager.GetString("WinForms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h4 class=&quot;title grey&quot;&gt;Implementation &amp;amp; Technologies&lt;/h4&gt;
        ///&lt;p&gt;
        ///    &lt;span class=&quot;bold&quot;&gt;ASP MVC:&lt;/span&gt;
        ///    The latest ASP MVC web framework allow rapid development of web sites, which has more or less standard functionality such as news feed, forums, comments.
        ///&lt;/p&gt;
        ///&lt;p&gt;
        ///    &lt;span class=&quot;bold&quot;&gt;Data layer:&lt;/span&gt;
        ///    Data layer implemented with use of mongo data base.
        ///&lt;/p&gt;
        ///
        ///.
        /// </summary>
        internal static string Zava {
            get {
                return ResourceManager.GetString("Zava", resourceCulture);
            }
        }
    }
}
